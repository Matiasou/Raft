package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"cs350/labrpc"
	"fmt"
	"math/rand"
	"sync"
	"sync/atomic"
	"time"
)

// import "bytes"
// import "cs350/labgob"

// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}

type LogEntry struct { // struct for entries
	Entry interface{}
	Term  int
}

// A Go object implementing a single Raft peer.
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.
	currentTerm     int
	votedFor        int
	logEntries      []logEntry // will need a struct for the log
	voteCounter     int        // to count the number of votes a server recieves. if voteCounter > N / 2 then its the leader
	state           int        // for follower depending on # if its a follower, leader or a candidate
	lastopperation  time.Time  // used to keep track when the last RPC was sent
	leaderElected   chan bool
	electionTimeout time.Duration // 150-300 ms if we timeout after not recieving a heartbeat from the leader.

}

const (
	Follower_State  = 0
	Candidate_State = 1
	Leader_State    = 2
)

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool

	// Your code here (2A).
	rf.mu.Lock()
	term = rf.currentTerm
	isleader = (rf.state == Leader_State)
	rf.mu.Unlock()
	return term, isleader
}

// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// AppendEntries := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}

// restore previously persisted state.
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}

// A service wants to switch to snapshot.  Only do so if Raft hasn't
// have more recent info since it communicate the snapshot on applyCh.
func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

// example RequestVote RPC arguments structure.
// field names must start with capital letters!
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term         int // current term of the candidate
	CandidateId  int // candidate id, 0 through  N-1  N = total servers
	LastLogIndex int
	LastLogTerm  int
}

// example RequestVote RPC reply structure.
// field names must start with capital letters!
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int  // current term of the receiving node
	VoteGranted bool // yes or no
}

// example RequestVote RPC handler.
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	//lock and unlock needed
	// Your code here (2A, 2B).
	fmt.Println("current term of server", rf.me, "is", rf.currentTerm)
	fmt.Println("args term of server", args.CandidateId, "is", args.Term)
	reply.Term = args.Term
	rf.mu.Lock()
	rf.lastopperation = time.Now()

	if rf.currentTerm < args.Term { // reply false if term < currentTerm
		rf.currentTerm = args.Term
		rf.voteCounter = 0
		rf.votedFor = args.CandidateId
		reply.VoteGranted = true
		rf.mu.Unlock()
		for {
			if len(rf.leaderElected) == 0 {
				break
			}
			<-rf.leaderElected
		}
		return
	}
	if rf.currentTerm > args.Term {
		reply.VoteGranted = false
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return

	} else {
		reply.VoteGranted = false
		rf.mu.Unlock()
	}

}

type AppendEntryArgs struct {
	Term         int // current term of the leader
	LeaderId     int // id of the leader
	Entries      []LogEntry
	PrevLogIndex int
	PrevLogTerm  int
	LeaderCommit int // what index have been received by the majority and committing
}

type AppendEntryReply struct {
	Term      int  // current term of the receiving node
	Success   bool // AppendEntry declined or accepted
	NextIndex int  // if declined, specifying the conflicting index
	SameIndex int  // if declined, specifying the conflicting term
}

// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	rf.mu.Lock()
	if rf.state != 1 {
		rf.mu.Unlock()
		return false
	} 
	rf.mu.Unlock()
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)

	//lock and unlock needed
	fmt.Println("vote", reply.VoteGranted)
	//fmt.Println("if voted", reply.VoteGranted)
	if reply.Term > rf.currentTerm {
		rf.currentTerm = reply.Term
		rf.votedFor = -1
		rf.voteCounter = 0
		rf.state = 0
		for {
			if len(rf.leaderElected) == 0 {
				break
			}
			<-rf.leaderElected
		}
	}
	if reply.VoteGranted {
		fmt.Println("vote granted")
		rf.voteCounter++
	}

	return ok
}

func (rf *Raft) AppendEntries(args *AppendEntryArgs, reply *AppendEntryReply) { // Create HeartBeat similar to sendRequestVote
	rf.mu.Lock()
	rf.lastopperation = time.Now()
	//lock and unlock needed
	reply.Term = rf.currentTerm
	// reply.NextIndex = len(rf.logEntries) - 1
	if args.Term < rf.currentTerm { // making sure that the leader has the correct term reciever implementation 1x
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return
	}
	if rf.currentTerm < args.Term {
		rf.currentTerm = args.Term
		rf.state = 0
		rf.votedFor = -1
		rf.voteCounter = 0
		rf.mu.Unlock()
		for {
			if len(rf.leaderElected) == 0 {
				break
			}
			<-rf.leaderElected
		}
	}else {
		rf.mu.Unlock()
	}
	rf.leaderElected <- true

	// else if rf.logEntries[args.PrevLogIndex]. != args.PrevLogIndex { // reciever implementation 2
	// 	reply.Success = false
	// }

	// else {
	// 	rf.currentTerm = args.Term
	// }
}

// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).

	return index, term, isLeader
}

// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

func (rf *Raft) sendAppendEntry() {
	//lock and unlock needed
	args := AppendEntryArgs{
		Term:     rf.currentTerm,
		LeaderId: rf.me,
		Entries:  make([]LogEntry, 0),
	}
	l := len(rf.peers)

	for x := 0; x < l; x++ {
		reply := AppendEntryReply{}
		go rf.peers[x].Call("Raft.AppendEntries", &args, &reply)

		if reply.Term > rf.currentTerm {
			rf.currentTerm = reply.Term
			rf.votedFor = -1
			rf.voteCounter = 0
			rf.state = 0
			for {
				if len(rf.leaderElected) == 0 {
					break
				}
				<-rf.leaderElected
			}
		}

	}
}

// The ticker go routine starts a new election if this peer hasn't received
// heartsbeats recently.
func (rf *Raft) ticker() {
	for !rf.killed() {
		rf.mu.Lock()
		//fmt.Println("current state for server", rf.me, "is", rf.state)
		if rf.state == 1 { // i am a candidate
			rf.mu.Unlock()
			start := time.Now()
			args := RequestVoteArgs{
				CandidateId: rf.me,
				Term:        rf.currentTerm,
				// LasLogIndex:
				// LastLogTerm:
			}
			l := len(rf.peers)
			m := rf.me
			
			// fmt.Println("here")
			for x := 0; x < l; x++ {
				reply := RequestVoteReply{}
				if x != m {
					go rf.sendRequestVote(x, &args, &reply)
					//fmt.Println("sent sendrequestvote rpc")
				}
			}

			rf.electionTimeout = time.Duration((500 + rand.Intn(300)) * int(time.Millisecond))
			// fmt.Println("electionTimeout", electionTimeout)
			for {
				if time.Since(start)-time.Duration(rf.electionTimeout) == 0 { // timeout occured so break (ask if * time.Millisecond is needed)
					break
				}
				//rf.mu.Lock()
				if rf.voteCounter > l/2 {
					fmt.Println("Server ", rf.me, "elected in term", rf.currentTerm)
					rf.state = 2 // we have recieved enough votes become a leader
					//rf.mu.Unlock()
					//if election timeout elapses: start new election
					rf.leaderElected <- true
					break
				} else {
					//rf.mu.Unlock()
				}

			}
			fmt.Println(rf.voteCounter)
			//fmt.Println(rf.leaderElected)
			// rf.mu.Lock()
			if len(rf.leaderElected) == 0 && rf.state == 1 { // there is no leader elected when timed out
				// fmt.Println("timeout incrementing counter")
				rf.currentTerm++
				rf.votedFor = rf.me
				rf.voteCounter = 1
			}
			//rf.mu.Unlock()

		}else if rf.state == 2 { // i am a leader	// NEED TO COMPLETE IN 2B
			rf.mu.Unlock()
			go rf.sendAppendEntry() // now we are a leader send HB
		} else if rf.state == 0 { // i am a follower
			rf.mu.Unlock()
			time.Sleep(300 * time.Millisecond)
			if len(rf.leaderElected) != 0 {
				for {
					if len(rf.leaderElected) == 0 {
						break
					}
					<-rf.leaderElected
				}
			} else {
				rf.state = 1
				rf.currentTerm++
				rf.votedFor = rf.me
				rf.voteCounter = 1
			}
			// 	// respond to heartbeat ask how either using a channel or not
			// 	HeartBeatTimeOut := time.Duration(300 * time.Millisecond)

			// 	deadline := rf.lastopperation.Add(HeartBeatTimeOut)

			// 	if time.Now().After(deadline) {
			// 		rf.state = 1
			// 		rf.currentTerm++
			// 		rf.votedFor = rf.me
			// 		rf.voteCounter = 1

			// 	}
		}
	}
}

// election timout function
// func (rf *Raft) getElectionTimeout() time.Duration{
// 	return time.Duration(500 + rand.Intn(500))
// }

// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me
	rf.lastopperation = time.Now()
	// Your initialization code here (2A, 2B, 2C).
	rf.currentTerm = 0
	rf.votedFor = -1
	rf.leaderElected = make(chan bool, 10)
	rf.logEntries = []logEntry{}
	rf.state = 0
	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

	// start ticker goroutine to start elections
	go rf.ticker()

	return rf
}
